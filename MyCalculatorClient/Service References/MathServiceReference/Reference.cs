//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyCalculatorClient.MathServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MathServiceReference.IMath")]
    public interface IMath {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/Add", ReplyAction="http://tempuri.org/IMath/AddResponse")]
        double Add(double x);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/Add", ReplyAction="http://tempuri.org/IMath/AddResponse")]
        System.Threading.Tasks.Task<double> AddAsync(double x);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/Subtract", ReplyAction="http://tempuri.org/IMath/SubtractResponse")]
        double Subtract(double x);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/Subtract", ReplyAction="http://tempuri.org/IMath/SubtractResponse")]
        System.Threading.Tasks.Task<double> SubtractAsync(double x);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/Multiplication", ReplyAction="http://tempuri.org/IMath/MultiplicationResponse")]
        double Multiplication(double x);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/Multiplication", ReplyAction="http://tempuri.org/IMath/MultiplicationResponse")]
        System.Threading.Tasks.Task<double> MultiplicationAsync(double x);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/Division", ReplyAction="http://tempuri.org/IMath/DivisionResponse")]
        double Division(double x);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/Division", ReplyAction="http://tempuri.org/IMath/DivisionResponse")]
        System.Threading.Tasks.Task<double> DivisionAsync(double x);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/Modular", ReplyAction="http://tempuri.org/IMath/ModularResponse")]
        double Modular(double x);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/Modular", ReplyAction="http://tempuri.org/IMath/ModularResponse")]
        System.Threading.Tasks.Task<double> ModularAsync(double x);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/GetRunningTotal", ReplyAction="http://tempuri.org/IMath/GetRunningTotalResponse")]
        double GetRunningTotal();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMath/GetRunningTotal", ReplyAction="http://tempuri.org/IMath/GetRunningTotalResponse")]
        System.Threading.Tasks.Task<double> GetRunningTotalAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMathChannel : MyCalculatorClient.MathServiceReference.IMath, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MathClient : System.ServiceModel.ClientBase<MyCalculatorClient.MathServiceReference.IMath>, MyCalculatorClient.MathServiceReference.IMath {
        
        public MathClient() {
        }
        
        public MathClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MathClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MathClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MathClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Add(double x) {
            return base.Channel.Add(x);
        }
        
        public System.Threading.Tasks.Task<double> AddAsync(double x) {
            return base.Channel.AddAsync(x);
        }
        
        public double Subtract(double x) {
            return base.Channel.Subtract(x);
        }
        
        public System.Threading.Tasks.Task<double> SubtractAsync(double x) {
            return base.Channel.SubtractAsync(x);
        }
        
        public double Multiplication(double x) {
            return base.Channel.Multiplication(x);
        }
        
        public System.Threading.Tasks.Task<double> MultiplicationAsync(double x) {
            return base.Channel.MultiplicationAsync(x);
        }
        
        public double Division(double x) {
            return base.Channel.Division(x);
        }
        
        public System.Threading.Tasks.Task<double> DivisionAsync(double x) {
            return base.Channel.DivisionAsync(x);
        }
        
        public double Modular(double x) {
            return base.Channel.Modular(x);
        }
        
        public System.Threading.Tasks.Task<double> ModularAsync(double x) {
            return base.Channel.ModularAsync(x);
        }
        
        public double GetRunningTotal() {
            return base.Channel.GetRunningTotal();
        }
        
        public System.Threading.Tasks.Task<double> GetRunningTotalAsync() {
            return base.Channel.GetRunningTotalAsync();
        }
    }
}
